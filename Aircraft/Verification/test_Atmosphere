import unittest
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from Atmosphere.ISA_Calculator import ISA_Calculator


class TestISACalculator(unittest.TestCase):

    def test_gravity_decreases_with_altitude(self):
        sea_level = ISA_Calculator(altitude=0)
        high_altitude = ISA_Calculator(altitude=10000)
        g0 = sea_level.results[0]["Gravity [m/s2]"]
        g10 = high_altitude.results[10000]["Gravity [m/s2]"]
        self.assertLess(g10, g0)

    def test_temperature_at_11000m(self):
        isa = ISA_Calculator(altitude=11000)
        temp = isa.results[11000]["Temperature [K]"]
        self.assertAlmostEqual(temp, 216.65, delta=0.1)

    def test_temperature_at_sea_level(self):
        isa = ISA_Calculator(altitude=0)
        temp = isa.results[0]["Temperature [K]"]
        self.assertAlmostEqual(temp, 288.15, delta=0.1)

    def test_pressure_at_11000m(self):
        isa = ISA_Calculator(altitude=11000)
        pressure = isa.results[11000]["Pressure [Pa]"]
        self.assertAlmostEqual(pressure, 22632, delta=10)  # ISA value

    def test_temperature_decreases_up_to_tropopause(self):
        low = ISA_Calculator(altitude=0)
        mid = ISA_Calculator(altitude=5000)
        high = ISA_Calculator(altitude=10000)
        self.assertLess(mid.results[5000]["Temperature [K]"], low.results[0]["Temperature [K]"])
        self.assertLess(high.results[10000]["Temperature [K]"], mid.results[5000]["Temperature [K]"])

if __name__ == "__main__":
    unittest.main()
